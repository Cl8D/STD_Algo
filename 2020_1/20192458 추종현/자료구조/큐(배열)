#include<iostream>
using namespace std;
template<class T>
class queue{
private:
  int rear;
  int front;
  int size;
  T * values;
public:
  queue(){
    front = rear = 0;
    size = 5;
    values = new T[size];
  }
  ~queue(){
    delete[] values;
  }
  void Push(const T value){
    if(!isFull())
      values[++rear] = value;
    else{ 
      changesize();
      values[++rear] = value;
    }
  }
  bool isEmpty(){
    if(front == rear)
      return true;
    else return false;
  }
  bool isFull(){
    if( (rear+1)%size == front )
      return true;
    else return false;
  }
  void changesize(){
    T * tmp = new T[size++];
    for(int i=front+1; i<=rear; i++)
      tmp[i] = values[i];
    delete[] values;
    values = tmp;
  }
  T Pop(){
    if(!isEmpty())
      return values[rear--];
    else{
      cout << "queue is Empty\n";
      return -1;
    }
  }
  T Front(){
    if(!isEmpty())
      return values[rear];
    else{
      cout << "queue is Empty\n";
      return -1;
    }
  }

};

int main(){
  queue <int>q;
  for(int i=1; i<=7; i++)
    q.Push(i);
  for(int i=1; i<=7; i++)
    cout << q.Pop() << endl;
}
